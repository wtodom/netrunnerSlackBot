# -*- coding: utf-8 -*-
import os, re
import urllib, urllib2 # Y U NO REQUESTS!? :(
from json import loads

REGEX = re.compile('\[\[(.*?)\]\]')
ALL_CARDS = loads(urllib2.urlopen('https://netrunnerdb.com/api/2.0/public/cards').read())['data']

ABBREVIATIONS = {
    'proco': 'Professional Contacts',
    'procon': 'Professional Contacts',
    'jhow': 'Jackson Howard',
    'smc': 'Self-Modifying Code',
    'kit': 'Rielle "Kit" Peddler',
    'abt': 'Accelerated Beta Test',
    'mopus': 'Magnum Opus',
    'mo': 'Magnum Opus',
    'charizard': 'Scheherazade',
    ':charizard:': 'Scheherazade',
    'siphon': 'Account Siphon',
    'deja': 'Déjà Vu',
    'deja vu': 'Déjà Vu',
    'gov takeover': 'Government Takeover',
    'gt': 'Government Takeover',
    'baby': 'Symmetrical Visage',
    'pancakes': 'Adjusted Chronotype',
    'dlr': 'Data Leak Reversal',
    'bn': 'Breaking News',
    'rp': 'Replicating Perfection',
    'neh': 'Near-Earth Hub',
    'pe': 'Perfecting Evolution',
    'white tree': 'Replicating Perfection',
    'black tree': 'Perfecting Evolution',
    'ci': 'Cerebral Imaging',
    'ppvp': 'Prepaid VoicePAD',
    'pvpp': 'Prepaid VoicePAD',
    'sfss': 'Shipment from SanSan',
    'rdi': 'R&D Interface',
    'hqi': 'HQ Interface',
    'gfi': 'Global Food Initiative',
    'dbs': 'Daily Business Show',
    'nre': 'Net-Ready Eyes',
    'elp': 'Enhanced Login Protocol',
    'levy': 'Levy AR Lab Access',
    'oai': 'Oversight AI',
    'fao': 'Forged Activation Orders',
    'psf': 'Private Security Force',
    'david': 'd4v1d',
    'ihw': 'I\'ve Had Worse',
    'qt': 'Quality Time',
    'nisei': 'Nisei Mk II',
    'dhpp': 'Director Haas\' Pet Project',
    'tfin': 'The Future Is Now',
    'ash': 'Ash 2X3ZB9CY',
    'cvs': 'Cyberdex Virus Suite',
    'otg': 'Off the Grid',
    'ts': 'Team Sponsorship',
    'glc': 'Green Level Clearance',
    'blc': 'Blue Level Clearance',
    'pp': 'Product Placement',
    'asi': 'All-Seeing I',
    'nas': 'New Angeles Sol',
    'bbg': 'Breaker Bay Grid',
    'drt': 'Dedicated Response Team',
    'sot': 'Same Old Thing',
    'stamherk': 'Stimhack',
    'stam herk': 'Stimhack',
    'tempo': 'Professional Contacts',
    'ff': 'Feedback Filter',
    'fis': 'Fisk Investment Seminar',
    'fisk': 'Laramy Fisk',
    'lf': 'Lucky Find',
    'prof': 'The Professor',
    'tol': 'Trick of Light',
    'manup': 'Mandatory Upgrades',
    'ij': 'Inside Job',
    'andy': 'Andromeda',
    'qpm': 'Quantum Predictive Model',
    'smashy dino': 'Shattered Remains',
    'smashy dinosaur': 'Shattered Remains',
    'mhc': 'Mental Health Clinic',
    'etf': 'Engineering the Future',
    'st': 'Stronger Together',
    'babw': 'Building a Better World',
    'bwbi': 'Because We Built It',
    'mn': 'Making News',
    'ct': 'Chaos Theory',
    'oycr': 'An Offer You Can\'t Refuse',
    'aoycr': 'An Offer You Can\'t Refuse',
    'hok': 'House of Knives',
    'cc': 'Clone Chip',
    'ta': 'Traffic Accident',
    'jesus': 'Jackson Howard',
    'baby bucks': 'Symmetrical Visage',
    'babybucks': 'Symmetrical Visage',
    'mediohxcore': 'Deuces Wild',
    'calimsha': 'Kate "Mac" McCaffrey',
    'spags': 'Troll',
    'bs': 'Blue Sun',
    'larla': 'Levy AR Lab Access',
    'ig': 'Industrial Genomics',
    'clone': 'Clone Chip',
    'josh01': 'Professional Contacts',
    'hiro': 'Chairman Hiro',
    'director': 'Director Haas',
    'haas': 'Director Haas',
    'zeromus': 'Mushin no Shin',
    'tldr': 'TL;DR',
    'sportsball': 'Team Sponsorship',
    'sports ball': 'Team Sponsorship',
    'sports': 'Team Sponsorship',
    'crfluency': 'Blue Sun',
    'dodgepong': 'Broadcast Square',
    'cheese potato': 'Data Leak Reversal',
    'cheese potatos': 'Data Leak Reversal',
    'cheese potatoes': 'Data Leak Reversal',
    'cycy': 'Cyber-Cipher',
    'cy cy': 'Cyber-Cipher',
    'cy-cy': 'Cyber-Cipher',
    'expose': 'Exposé',
    'sneakysly': 'Stimhack',
    'eap': 'Explode-a-palooza',
    'wnp': 'Wireless Net Pavilion',
    'mcg': 'Mumbad City Grid',
    'sscg': 'SanSan City Grid',
    'jes': 'Jesminder Sareen',
    'jess': 'Jesminder Sareen',
    'jessie': 'Jesminder Sareen',
    'palana': 'Pālanā Foods',
    'palana foods': 'Pālanā Foods',
    'plop': 'Political Operative',
    'polop': 'Political Operative',
    'pol op': 'Political Operative',
    'poop': 'Political Operative',
    'mcc': 'Mumbad Construction Co.',
    'coco': 'Mumbad Construction Co.',
    'moh': 'Museum of History',
    'cst': 'Corporate Sales Team',
    'panera': 'Panchatantra',
    'pancetta': 'Panchatantra',
    'hhn': 'Hard-Hitting News',
    'adap': 'Another Day, Another Paycheck',
    'maus': 'Mausolus',
    'eoi': 'Exchange of Information',
    'oota': 'Out of the Ashes',
    'tw': 'The Turning Wheel',
    'dnn': 'Dedicated Neural Net',
    'ftm': 'Fear The Masses',
    'ttw': 'The Turning Wheel',
    'tw': 'The Turning Wheel',
    'tbf': 'The Black File',
    'bf': 'The Black File',
    'ips': 'Improved Protien Source',
    'nmcg': 'Navi Mumbai City Grid',
    'tpof': 'The Price of Freedom',
    'pgo': 'Power Grid Overload',
    'am': 'Archived Memories',
    'ro': 'Reclamation Order',
    'mch': 'Mumbad City Hall',
    'nach': 'New Angeles City Hall',
    'dl': 'Dirty Laundry',
    'tr': 'Test Run',
    'itd': 'IT Department',
    'it': 'IT Department',
    'vi': 'Voter Intimidation',
    'fte': 'Freedom Through Equality',
    'vbg': 'Virus Breeding Ground',
    'exploda': 'Explode-a-palooza',
    'ctm': 'NBN: Controlling the Message',
    'hrf': 'Hyouba Research Facility',
    'abr': 'Always Be Running',
    'dan': 'Deuces Wild',
    ':dan:': 'Deuces Wild',
    ':themtg:': 'Deuces Wild',
    'pornstache': 'Hernando Cortez',
    'porn stache': 'Hernando Cortez',
    'porn-stache': 'Hernando Cortez',
    'vape': 'Deuces Wild',
    'ANUSPIE': 'ZU.13 Key Master',
    'fucking bullshit': 'Friends In High Places'
}

def lambda_handler(event, context):
    body = loads(event['body'])
    text = body['event']['text']
    channel = body['event']['channel']
    print 'Found: ' + str(text) + ' in channel ' + channel
    matches = REGEX.findall(text)
    if matches:
        for match in matches:
            if match in ABBREVIATIONS:
                match = ABBREVIATIONS[match]
            print 'checking for ' + match
            for card in ALL_CARDS:
                if all([c in card['title'].lower() for c in match.lower().split()]):
                    submitResponse(card['code'], card['title'], channel)
                    break
    return {
        "statusCode": 200,
        "headers": {"Content-Type":"application/json"},
        "body": 'I hear ya'
    }
    
def submitResponse(card_id, card_name, channel):
    url = 'https://slack.com/api/chat.postMessage'
    
    data = 'token=' + os.environ['responseToken'] + '&attachments=%5B%7B%27image_url%27%3A+%27https%3A%2F%2Fnetrunnerdb.com%2Fcard_image%2F' + card_id + '.png%27%2C+%27title%27%3A+%27' + card_name + '%27%7D%5D&channel=' + channel
    req = urllib2.Request(url, data)
    urllib2.urlopen(req)
